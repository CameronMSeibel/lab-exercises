# variables `fav_1` and `fav_2`
fav_1 <- 13
fav_2 <- 37
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
# Create a variable `sum_round` that is the sum of the rounded values
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
View(range)
# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name <- "Cameron Michael Seibel"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 13
fav_2 <- 37
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2 / sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1, 1)
round_2 <- round(fav_2, 1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
max(round_sum, sum_round)
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Seattle"
# Assign your name to the variable `my_name`
my_name <- list(first_name = "Cameron", last_name = "Seibel")
# Assign your height (in inches) to a variable `my_height`
my_height <- 73
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- .Machine$integer.max
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000 # Expensive puppers
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price # kappa
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000 / puppy_price) # Not nearly enough puppies!
# Exercise 2: using built-in string functions
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simple example (or
# use `?gsub`)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
my_list <- list(e1 <- c(1, 0, 0), e2 <- c(0, 1, 0), e3 <- c(0, 0, 1))
my_list$e1
my_list[1]
e1
View(my_list)
I_3 <- list(e1 = c(1, 0, 0), e2 = c(0, 1, 0), e3 <- (0, 0, 1))
I_3 <- list(e1 = c(1, 0, 0), e2 = c(0, 1, 0), e3 = c(0, 0, 1))
View(my_list)
View(I_3)
I_3$e1
my_list <- list(a1 = c(3, 4, 5), a2 = c(1, 2, 3), a3 = c(7, 8, 9))
View(my_list)
View(my_list)
my_list <- NULL
my_list <- list(a1 = c(3, 4, 5), a2 = c(1, 2, 3), a3 = c(7, 8, 9))
View(my_list)
View(I_3)
View(my_list)
View(I_3)
View(my_list)
View(my_list)
my_list$a1
View(my_list)
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("coffee", "mineral water")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("instant ramen", "mineral water")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals`` list that has what you plan to eat
# for dinner
meals$dinner <- c("popcorn chicken", "pot stickers", "bubble tea")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
# Create a vector `better_meals` that is all your meals, but with pizza!
meals[[5]] <- meals[["lunch"]]
early_meals <- list(meals[["breakfast"]], meals[["lunch"]])
View(early_meals)
foods_eaten <- lapply(meals, length)
View(foods_eaten)
add_pizza <- function(meal){
return(meal+c("pizza"))
}
add_pizza(my_breakfast)
add_pizza <- function(meal){
return(meal + c("pizza"))
}
add_pizza(my_breakfast)
add_pizza <- function(meal){
return(append(meal, c("pizza")))
}
add_pizza(my_breakfast)
better_meals <- lapply(meals, add_pizza)
View(better_meals)
better_meals <- c(add_pizza((meals[[1:5]])
)
;
better_meals <- c(add_pizza((meals[[1:5]])))
better_meals <- c(add_pizza((meals[1:5])))
View(better_meals)
View(better_meals)
better_meals <- c(add_pizza((meals[1:5])))
better_meals <- c(add_pizza((meals[[1:5]])))
better_meals <- lapply(meals, add_pizza)
?matrix
employees <- paste("Employee", 1:100)
?runif
salaries <- runif(100, 40000, 50000)
new_salaries <- salaries - runif(100, -5000, 10000)
old_salaries <- runif(100, 40000, 50000)
salaries <- data.frame(employees, old_salaries, new_salaries)
View(salaries)
salaries$change <- salaries$old_salaries - salaries$new_salaries
View(salaries)
salaries$change <- salaries$new_salaries - salaries$old_salaries
new_salaries <- salaries + runif(100, -5000, 10000)
salaries <- data.frame(employees, old_salaries, new_salaries)
salaries$change <- salaries$new_salaries - salaries$old_salaries
View(new_salaries)
View(salaries)
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
old_salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- salaries + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, old_salaries, new_salaries)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries$new_salaries - salaries$old_salaries
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
# How many employees got a raise?
# What was the dollar value of the highest raise?
# What was the "name" of the employee who received the highest raise?
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
new_salaries <- old_salaries + runif(100, -5000, 10000)
salaries <- data.frame(employees, old_salaries, new_salaries)
salaries$change <- salaries$new_salaries - salaries$old_salaries
salaries$got_raise <- salaries$change > 0
salaries$new_salaries[57]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
old_salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- old_salaries + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, old_salaries, new_salaries)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries$new_salaries - salaries$old_salaries
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
salaries$new_salaries[57]
# How many employees got a raise?
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$change == highest_raise]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
most_promoted <- salaries$employees[salaries$change == highest_raise]
most_promoted <- salaries$employees[salaries$change == highest_raise]
salaries$employees[salaries$change == highest_raise]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
old_salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- old_salaries + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, old_salaries, new_salaries, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries$new_salaries - salaries$old_salaries
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
salaries$new_salaries[57]
# How many employees got a raise?
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$change == highest_raise]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
old_salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- old_salaries + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, old_salaries, new_salaries, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries$new_salaries - salaries$old_salaries
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
salaries$new_salaries[57]
# How many employees got a raise?
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$change == highest_raise]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
old_salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- old_salaries + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, old_salaries, new_salaries, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries$new_salaries - salaries$old_salaries
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
salaries$new_salaries[57]
# How many employees got a raise?
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries$employees[salaries$change == highest_raise]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
most_promoted <- salaries$employees[salaries$change == highest_raise]
?min
worst_demotion <- min(salaries$change)
most_demoted <- salaries$employees[salaries$change == worst_demotion]
average_promotion <- mean(salaries$change)
average_change <- mean(salaries$change)
average_demotion <- mean(salaries$change[salaries$change < 0])
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
old_salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- old_salaries + runif(100, -5000, 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, old_salaries, new_salaries, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- salaries$new_salaries - salaries$old_salaries
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of employee 57
salaries$new_salaries[57]
# How many employees got a raise?
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$change)
# What was the "name" of the employee who received the highest raise?
most_promoted <- salaries$employees[salaries$change == highest_raise]
# What was the largest decrease in salaries between the two years?
worst_demotion <- min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
most_demoted <- salaries$employees[salaries$change == worst_demotion]
# What was the average salary change?
average_change <- mean(salaries$change)
# For people who did not get a raise, how much money did they lose on average?
average_demotion <- mean(salaries$change[salaries$change < 0])
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
write.csv(salaries, file = "salary_data.csv")
write.csv(salaries, file = "./salary_data.csv")
write.csv(salaries, file = "salary_data.csv")
?count
length(salaries$change[salaries$change > 0])
employees_raised <- length(salaries$change[salaries$change > 0])
iris_df <- data.frame(iris)
View(iris_df)
iris_df$Sepal.Length
iris_df[[iris_df$Species == "virginica"]]
iris_df[iris_df$Species == "virginica"]
iris_df[[iris_df$Species == "virginica"]]
iris_df$Sepal.Length[[iris_df$Species == "virginica"]]
iris_df$Sepal.Length[iris_df$Species == "virginica"]
iris_df[, iris_df$Species == "virginica"]
iris_df[[iris_df$Species == "virginica"]]
iris_df[[iris_df$Species == "virginica"]]
iris_df[iris_df$Species == "virginica"]
iris_df[, iris_df$Species == "virginica"]
iris_df[[iris_df$Petal.Length > 4.0]]
iris_df[iris_df$Species == "virginica", ]
iris_df[iris_df$Petal.Length > 4.0,]
iris_df$long.petal <- iris_df$Petal.Length > 4.0
iris_df[max(iris_df$Sepal.Length) == iris_df$Sepal.Length, "Species"]
iris_df[iris_df$Species == "setosa" && iris_df$Sepal.Width > 3.0, ]
iris_df[iris_df$Species == "setosa" & iris_df$Sepal.Width > 3.0, ]
iris_df <- data.frame(iris)
# Select all values of data frame for Sepal.length
iris_df$Sepal.Length
# Select only rows of Virginica flowers
iris_df[iris_df$Species == "virginica", ]
# Select only the sepal legnth of the Virginica flowers
iris_df$Sepal.Length[iris_df$Species == "virginica"]
# Select rows where Petal.Length > 4.0
iris_df[iris_df$Petal.Length > 4.0,]
# Add a column to the dataframe indicating whether Petal.Length > 4.0
iris_df$long.petal <- iris_df$Petal.Length > 4.0
# Find the species type of the flower that has the longest Sepal length
iris_df[max(iris_df$Sepal.Length) == iris_df$Sepal.Length, "Species"]
# Select rows where species type is 'setosa' and Sepal.Width > 3.0
iris_df[iris_df$Species == "setosa" & iris_df$Sepal.Width > 3.0, ]
iris_df[iris_df$Species == "virginica", "Sepal.Length"]
iris_df <- data.frame(iris)
# Select all values of data frame for Sepal.length
iris_df$Sepal.Length
# Select only rows of Virginica flowers
iris_df[iris_df$Species == "virginica", ]
# Select only the sepal legnth of the Virginica flowers
iris_df[iris_df$Species == "virginica", "Sepal.Length"]
# Select rows where Petal.Length > 4.0
iris_df[iris_df$Petal.Length > 4.0,]
# Add a column to the dataframe indicating whether Petal.Length > 4.0
iris_df$long.petal <- iris_df$Petal.Length > 4.0
# Find the species type of the flower that has the longest Sepal length
iris_df[max(iris_df$Sepal.Length) == iris_df$Sepal.Length, "Species"]
# Select rows where species type is 'setosa' and Sepal.Width > 3.0
iris_df[iris_df$Species == "setosa" & iris_df$Sepal.Width > 3.0, ]
getwd()
setwd("~/Documents/INFO_201/lab-exercises/week-3")
course <- list(code = "INFO 201")
course[[code]]
course$1
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
View(course)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
colnames(USPersonalExpenditure)
# What are the row names of your dataframe?
rownames(USPersonalExpenditure)
USPersonalExpenditure$category <- row.names(USPersonalExpenditure)
View(USPersonalExpenditure)
View(USPersonalExpenditure)
personal_expenditure <- as.data.frame(USPersonalExpenditure)
colnames(personal_expenditure)
data("USPersonalExpenditure")
is.data.frame(USPersonalExpenditure)
personal_expenditure <- as.data.frame(USPersonalExpenditure)
colnames(personal_expenditure)
rownames(personal_expenditure)
personal_expenditure$category <- row.names(USPersonalExpenditure)
print(personal_expenditure[personal_expenditure$category == "Personal Care", "1940"])
print(personal_expenditure[personal_expenditure$category == "Food and Tobacco", "1960"])
